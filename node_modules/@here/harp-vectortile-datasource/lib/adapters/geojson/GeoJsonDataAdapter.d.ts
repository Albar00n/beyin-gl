import { ValueMap } from "@here/harp-datasource-protocol/lib/Env";
import { GeoPointLike } from "@here/harp-geoutils";
import { DataAdapter } from "../../DataAdapter";
import { DecodeInfo } from "../../DecodeInfo";
import { IGeometryProcessor } from "../../IGeometryProcessor";
declare type GeoJsonGeometry = GeoJsonLineStringGeometry | GeoJsonMultiLineStringGeometry | GeoJsonPolygonGeometry | GeoJsonMultiPolygonGeometry | GeoJsonPointGeometry | GeoJsonMultiPointGeometry;
interface GeoJsonLineStringGeometry {
    type: "LineString";
    coordinates: GeoPointLike[];
}
interface GeoJsonMultiLineStringGeometry {
    type: "MultiLineString";
    coordinates: GeoPointLike[][];
}
interface GeoJsonPointGeometry {
    type: "Point";
    coordinates: GeoPointLike;
}
interface GeoJsonMultiPointGeometry {
    type: "MultiPoint";
    coordinates: GeoPointLike[];
}
interface GeoJsonPolygonGeometry {
    type: "Polygon";
    coordinates: GeoPointLike[][];
}
interface GeoJsonMultiPolygonGeometry {
    type: "MultiPolygon";
    coordinates: GeoPointLike[][][];
}
interface GeoJsonFeature {
    id?: string;
    type: "Feature";
    properties: ValueMap;
    geometry: GeoJsonGeometry;
}
export interface GeoJsonFeatureCollection {
    type: "FeatureCollection";
    features: GeoJsonFeature[];
}
export declare class GeoJsonDataAdapter implements DataAdapter {
    /**
     * @override
     */
    canProcess(featureCollection: Partial<GeoJsonFeatureCollection>): boolean;
    /** @override */
    process(featureCollection: GeoJsonFeatureCollection, decodeInfo: DecodeInfo, geometryProcessor: IGeometryProcessor, layer?: string): void;
}
export {};
//# sourceMappingURL=GeoJsonDataAdapter.d.ts.map