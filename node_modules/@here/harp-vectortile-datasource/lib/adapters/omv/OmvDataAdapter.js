"use strict";
/*
 * Copyright (C) 2019-2021 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OmvDataAdapter = exports.asGeometryType = void 0;
const index_decoder_1 = require("@here/harp-datasource-protocol/index-decoder");
const harp_utils_1 = require("@here/harp-utils");
const Long = require("long");
const three_1 = require("three");
const OmvDataFilter_1 = require("../../OmvDataFilter");
const OmvDecoderDefs_1 = require("../../OmvDecoderDefs");
const OmvPoliticalViewFeatureModifier_1 = require("../../OmvPoliticalViewFeatureModifier");
const OmvUtils_1 = require("../../OmvUtils");
const StyleSetDataFilter_1 = require("../../StyleSetDataFilter");
const OmvData_1 = require("./OmvData");
const vector_tile_1 = require("./proto/vector_tile");
const propertyCategories = [
    "stringValue",
    "floatValue",
    "doubleValue",
    "intValue",
    "uintValue",
    "sintValue",
    "boolValue"
];
const logger = harp_utils_1.LoggerManager.instance.create("OmvDataAdapter", { enabled: false });
function simplifiedValue(value) {
    const hasOwnProperty = Object.prototype.hasOwnProperty;
    for (const category of propertyCategories) {
        if (hasOwnProperty.call(value, category)) {
            const v = value[category];
            if (v === undefined) {
                throw new Error("unpexted undefined value");
            }
            return Long.isLong(v) ? v.toNumber() : v;
        }
    }
    throw new Error("not happening");
}
function decodeFeatureId(feature, properties, logger) {
    if (properties.id !== undefined && properties.id !== null) {
        return properties.id;
    }
    if (feature.hasOwnProperty("id")) {
        const id = feature.id;
        if (typeof id === "number") {
            return id;
        }
        else if (id) {
            if (logger !== undefined && id.greaterThan(Number.MAX_SAFE_INTEGER)) {
                logger.error("Invalid ID: Larger than largest available Number in feature: ", feature);
            }
            return id.toNumber();
        }
    }
    return undefined;
}
function readAttributes(layer, feature) {
    const attrs = new OmvData_1.FeatureAttributes();
    const attributes = {};
    attrs.accept(layer, feature, {
        visitAttribute: (name, value) => {
            attributes[name] = simplifiedValue(value);
            return true;
        }
    });
    return attributes;
}
function asGeometryType(feature) {
    if (feature === undefined) {
        return OmvDecoderDefs_1.OmvGeometryType.UNKNOWN;
    }
    switch (feature.type) {
        case vector_tile_1.com.mapbox.pb.Tile.GeomType.UNKNOWN:
            return OmvDecoderDefs_1.OmvGeometryType.UNKNOWN;
        case vector_tile_1.com.mapbox.pb.Tile.GeomType.POINT:
            return OmvDecoderDefs_1.OmvGeometryType.POINT;
        case vector_tile_1.com.mapbox.pb.Tile.GeomType.LINESTRING:
            return OmvDecoderDefs_1.OmvGeometryType.LINESTRING;
        case vector_tile_1.com.mapbox.pb.Tile.GeomType.POLYGON:
            return OmvDecoderDefs_1.OmvGeometryType.POLYGON;
        default:
            return OmvDecoderDefs_1.OmvGeometryType.UNKNOWN;
    } // switch
}
exports.asGeometryType = asGeometryType;
// Ensures ring winding follows Mapbox Vector Tile specification: outer rings must be clockwise,
// inner rings counter-clockwise.
// See https://docs.mapbox.com/vector-tiles/specification/
function checkWinding(multipolygon) {
    const firstPolygon = multipolygon[0];
    if (firstPolygon === undefined || firstPolygon.rings.length === 0) {
        return;
    }
    // Opposite sign to ShapeUtils.isClockWise, since webMercator tile space has top-left origin.
    // For example:
    // Given the ring = [(1,2), (2,2), (2,1), (1,1)]
    // ShapeUtils.area(ring) > 0    -> false
    // ShapeUtils.isClockWise(ring) -> true
    // ^
    // |  1,2 -> 2,2
    // |          |
    // |  1,1 <- 2,1
    // |_______________>
    //
    // Tile space axis
    //  ______________>
    // |  1,1 <- 2,1
    // |          |
    // |  1,2 ->  2,2
    // V
    const isOuterRingClockWise = three_1.ShapeUtils.area(firstPolygon.rings[0]) > 0;
    if (!isOuterRingClockWise) {
        for (const polygon of multipolygon) {
            for (const ring of polygon.rings) {
                ring.reverse();
            }
        }
    }
}
function roundUpCoordinates(coordinates, layerExtents) {
    coordinates.forEach(p => {
        if (p.x === layerExtents - 1) {
            p.x = layerExtents;
        }
    });
}
function roundUpPolygonCoordinates(geometry, layerExtents) {
    geometry.forEach(polygon => polygon.rings.forEach(r => roundUpCoordinates(r, layerExtents)));
}
function roundUpLineCoordinates(geometry, layerExtents) {
    geometry.forEach(line => roundUpCoordinates(line.positions, layerExtents));
}
function createFeatureModifier(filterDescription, featureModifierId) {
    switch (featureModifierId) {
        case OmvDecoderDefs_1.FeatureModifierId.default:
            return new OmvDataFilter_1.OmvGenericFeatureModifier(filterDescription);
        default:
            harp_utils_1.assert(!"Unrecognized feature modifier id, using default!");
            return new OmvDataFilter_1.OmvGenericFeatureModifier(filterDescription);
    }
}
/**
 * The class `OmvDataAdapter` converts OMV protobuf geo data
 * to geometries for the given `IGeometryProcessor`.
 */
class OmvDataAdapter {
    constructor() {
        this.m_geometryCommands = new OmvData_1.GeometryCommands();
        this.m_roundUpCoordinatesIfNeeded = false;
    }
    /**
     * The [[OmvFeatureFilter]] used to filter features.
     */
    get dataFilter() {
        return this.m_dataFilter;
    }
    /**
     * Configures the OMV adapter.
     *
     * @param options - Configuration options.
     * @param styleSetEvaluator - Style set evaluator instance, used for filtering.
     */
    configure(options, styleSetEvaluator) {
        var _a;
        if (options.filterDescription !== undefined) {
            if (options.filterDescription !== null) {
                // TODO: Feature modifier is always used only with feature filter.
                // At best the filtering feature should be excluded from other feature
                // modifiers and be performed solely via OmvGenericFeature modifier or filter.
                const filterDescription = options.filterDescription;
                const featureModifiersIds = options.featureModifiers;
                // Create new filter from description.
                this.m_dataFilter = new OmvDataFilter_1.OmvGenericFeatureFilter(filterDescription);
                // Create feature modifiers.
                const featureModifiers = [];
                if (featureModifiersIds !== undefined) {
                    featureModifiersIds.forEach(fmId => {
                        featureModifiers.push(createFeatureModifier(filterDescription, fmId));
                    });
                }
                else {
                    featureModifiers.push(createFeatureModifier(filterDescription, OmvDecoderDefs_1.FeatureModifierId.default));
                }
                this.m_featureModifiers = featureModifiers;
            }
            else {
                // null is the signal to clear the filter/modifier
                this.m_dataFilter = undefined;
                this.m_featureModifiers = undefined;
            }
            const styleSetDataFilter = new StyleSetDataFilter_1.StyleSetDataFilter(styleSetEvaluator);
            this.m_dataFilter = this.m_dataFilter
                ? new OmvDataFilter_1.ComposedDataFilter([styleSetDataFilter, this.m_dataFilter])
                : styleSetDataFilter;
        }
        if (options.politicalView !== undefined) {
            const politicalView = options.politicalView;
            let featureModifiers = this.m_featureModifiers;
            // Remove existing political view modifiers, this actually setups default,
            // commonly accepted point of view - without feature modifier.
            if (featureModifiers) {
                featureModifiers = featureModifiers.filter(fm => !(fm instanceof OmvPoliticalViewFeatureModifier_1.OmvPoliticalViewFeatureModifier));
            }
            // If political view is indeed requested append feature modifier at the end of list.
            if (politicalView.length !== 0) {
                harp_utils_1.assert(politicalView.length === 2, "The political view must be specified as two letters ISO 3166-1 standard!");
                const povFeatureModifier = new OmvPoliticalViewFeatureModifier_1.OmvPoliticalViewFeatureModifier(politicalView);
                if (featureModifiers) {
                    featureModifiers.push(povFeatureModifier);
                }
                else {
                    featureModifiers = [povFeatureModifier];
                }
            }
            // Reset modifiers if nothing was added.
            this.m_featureModifiers =
                featureModifiers && featureModifiers.length > 0 ? featureModifiers : undefined;
        }
        this.m_roundUpCoordinatesIfNeeded = (_a = options.roundUpCoordinatesIfNeeded) !== null && _a !== void 0 ? _a : false;
    }
    /**
     * @override
     */
    canProcess(data) {
        return OmvUtils_1.isArrayBufferLike(data);
    }
    /**
     * @override
     */
    process(data, decodeInfo, geometryProcessor) {
        const { tileKey } = decodeInfo;
        const payload = new Uint8Array(data);
        const proto = vector_tile_1.com.mapbox.pb.Tile.decode(payload);
        this.m_tileKey = tileKey;
        this.m_processor = geometryProcessor;
        OmvData_1.visitOmv(proto, this);
    }
    /**
     * Visits the OMV layer.
     *
     * @param layer - The OMV layer to process.
     */
    visitLayer(layer) {
        this.m_layer = layer;
        const storageLevel = this.m_tileKey.level;
        const layerName = layer.name;
        if (this.m_dataFilter !== undefined &&
            !this.m_dataFilter.wantsLayer(layerName, storageLevel)) {
            return false;
        }
        return true;
    }
    /**
     * Visits point features.
     *
     * @param feature - The OMV point features to process.
     */
    visitPointFeature(feature) {
        var _a, _b, _c;
        if (feature.geometry === undefined) {
            return;
        }
        // Pass feature modifier method to processFeature if there's any modifier. Get it from any
        // modifier, processFeature will later apply it to all using Function.apply().
        const modifierFunc = (_a = this.m_featureModifiers) === null || _a === void 0 ? void 0 : _a[0].doProcessPointFeature;
        const properties = this.filterAndModifyFeature(feature, (_b = this.m_dataFilter) === null || _b === void 0 ? void 0 : _b.wantsPointFeature, modifierFunc);
        if (!properties) {
            return;
        }
        const layerName = this.m_layer.name;
        const layerExtents = (_c = this.m_layer.extent) !== null && _c !== void 0 ? _c : 4096;
        const geometry = [];
        this.m_geometryCommands.accept(feature.geometry, {
            type: "Point",
            visitCommand: command => {
                if (OmvData_1.isMoveToCommand(command)) {
                    geometry.push(new three_1.Vector3(command.position.x, command.position.y, 0));
                }
            }
        });
        if (geometry.length === 0) {
            return;
        }
        this.m_processor.processPointFeature(layerName, layerExtents, geometry, properties, decodeFeatureId(feature, properties, logger));
    }
    /**
     * Visits the line features.
     *
     * @param feature - The line features to process.
     */
    visitLineFeature(feature) {
        var _a, _b, _c;
        if (feature.geometry === undefined) {
            return;
        }
        // Pass feature modifier method to processFeature if there's any modifier. Get it from any
        // modifier, processFeature will later apply it to all using Function.apply().
        const modifierFunc = (_a = this.m_featureModifiers) === null || _a === void 0 ? void 0 : _a[0].doProcessLineFeature;
        const properties = this.filterAndModifyFeature(feature, (_b = this.m_dataFilter) === null || _b === void 0 ? void 0 : _b.wantsLineFeature, modifierFunc);
        if (!properties) {
            return;
        }
        const layerName = this.m_layer.name;
        const layerExtents = (_c = this.m_layer.extent) !== null && _c !== void 0 ? _c : 4096;
        const geometry = [];
        let positions;
        this.m_geometryCommands.accept(feature.geometry, {
            type: "Line",
            visitCommand: command => {
                if (OmvData_1.isMoveToCommand(command)) {
                    positions = [command.position];
                    geometry.push({ positions });
                }
                else if (OmvData_1.isLineToCommand(command)) {
                    positions.push(command.position);
                }
            }
        });
        if (geometry.length === 0) {
            return;
        }
        if (this.mustRoundUpCoordinates) {
            roundUpLineCoordinates(geometry, layerExtents);
        }
        this.m_processor.processLineFeature(layerName, layerExtents, geometry, properties, decodeFeatureId(feature, properties, logger));
    }
    /**
     * Visits the polygon features.
     *
     * @param feature - The polygon features to process.
     */
    visitPolygonFeature(feature) {
        var _a, _b, _c;
        if (feature.geometry === undefined) {
            return;
        }
        // Pass feature modifier method to processFeature if there's any modifier. Get it from any
        // modifier, processFeature will later apply it to all using Function.apply().
        const modifierFunc = (_a = this.m_featureModifiers) === null || _a === void 0 ? void 0 : _a[0].doProcessPolygonFeature;
        const properties = this.filterAndModifyFeature(feature, (_b = this.m_dataFilter) === null || _b === void 0 ? void 0 : _b.wantsPolygonFeature, modifierFunc);
        if (!properties) {
            return;
        }
        const layerName = this.m_layer.name;
        const layerExtents = (_c = this.m_layer.extent) !== null && _c !== void 0 ? _c : 4096;
        const geometry = [];
        let currentPolygon;
        let currentRing;
        let exteriorWinding;
        this.m_geometryCommands.accept(feature.geometry, {
            type: "Polygon",
            visitCommand: command => {
                if (OmvData_1.isMoveToCommand(command)) {
                    currentRing = [command.position];
                }
                else if (OmvData_1.isLineToCommand(command)) {
                    currentRing.push(command.position);
                }
                else if (OmvData_1.isClosePathCommand(command)) {
                    if (currentRing !== undefined && currentRing.length > 0) {
                        const currentRingWinding = Math.sign(three_1.ShapeUtils.area(currentRing));
                        // Winding order from XYZ spaces might be not MVT spec compliant, see HARP-11151.
                        // We take the winding of the very first ring as reference.
                        if (exteriorWinding === undefined) {
                            exteriorWinding = currentRingWinding;
                        }
                        // MVT spec defines that each exterior ring signals the beginning of a new polygon.
                        // see https://github.com/mapbox/vector-tile-spec/tree/master/2.1
                        if (currentRingWinding === exteriorWinding) {
                            // Create a new polygon and push it into the collection of polygons
                            currentPolygon = { rings: [] };
                            geometry.push(currentPolygon);
                        }
                        // Push the ring into the current polygon
                        currentRing.push(currentRing[0].clone());
                        currentPolygon === null || currentPolygon === void 0 ? void 0 : currentPolygon.rings.push(currentRing);
                    }
                }
            }
        });
        if (geometry.length === 0) {
            return;
        }
        if (this.mustRoundUpCoordinates) {
            roundUpPolygonCoordinates(geometry, layerExtents);
        }
        checkWinding(geometry);
        this.m_processor.processPolygonFeature(layerName, layerExtents, geometry, properties, decodeFeatureId(feature, properties, logger));
    }
    /**
     * Applies any filter and modifiers to a given feature.
     *
     * @param feature - The feature to filter and modify.
     * @param filterFunc - The filtering function.
     * @param modifierFunc - The modifier function.
     * @returns The modified feature properties or `undefined` if feature is filtered out.
     */
    filterAndModifyFeature(feature, filterFunc, modifierFunc) {
        var _a;
        const storageLevel = this.m_tileKey.level;
        const layerName = this.m_layer.name;
        const geometryType = asGeometryType(feature);
        if (this.m_dataFilter &&
            filterFunc.apply(this.m_dataFilter, [layerName, geometryType, storageLevel]) === false) {
            return undefined;
        }
        const properties = readAttributes(this.m_layer, feature);
        const env = new index_decoder_1.MapEnv(properties);
        if (((_a = this.m_featureModifiers) === null || _a === void 0 ? void 0 : _a.find(fm => {
            // TODO: The logic of feature ignore should be actually in the feature filtering
            // mechanism - see OmvFeatureFilter.
            harp_utils_1.assert(modifierFunc !== undefined);
            return !modifierFunc.apply(fm, [layerName, env, this.m_tileKey.level]);
        })) !== undefined) {
            return undefined;
        }
        return properties;
    }
    get mustRoundUpCoordinates() {
        return (this.m_roundUpCoordinatesIfNeeded &&
            this.m_tileKey.level < 5 &&
            this.m_tileKey.column === this.m_tileKey.columnCount() - 1);
    }
}
exports.OmvDataAdapter = OmvDataAdapter;
//# sourceMappingURL=OmvDataAdapter.js.map