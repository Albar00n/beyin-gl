import { DecodedTile, DecoderOptions, OptionsMap, ValueMap } from "@here/harp-datasource-protocol";
import { StyleSetEvaluator } from "@here/harp-datasource-protocol/index-decoder";
import { Projection, TileKey } from "@here/harp-geoutils";
import { ThemedTileDecoder } from "@here/harp-mapview-decoder/index-worker";
import * as THREE from "three";
import { DataAdapter } from "./DataAdapter";
import { IGeometryProcessor, ILineGeometry, IPolygonGeometry } from "./IGeometryProcessor";
import { OmvFeatureFilter } from "./OmvDataFilter";
import { VectorTileDataEmitterOptions } from "./VectorTileDataEmitter";
/**
 * Options for VectorTileDataProcessor, @see {@link OmvDecoderOptions}.
 * @internal
 */
export interface VectorTileDataProcessorOptions extends VectorTileDataEmitterOptions {
    storageLevelOffset?: number;
    showMissingTechniques?: boolean;
}
/**
 * Geometry processor for vector tiles.
 * @internal
 */
export declare class VectorTileDataProcessor implements IGeometryProcessor {
    private readonly m_tileKey;
    private readonly m_projection;
    private readonly m_styleSetEvaluator;
    private readonly m_dataAdapter;
    private readonly m_options;
    private readonly m_dataFilter?;
    private m_decodedTileEmitter;
    constructor(m_tileKey: TileKey, m_projection: Projection, m_styleSetEvaluator: StyleSetEvaluator, m_dataAdapter: DataAdapter, m_options?: VectorTileDataProcessorOptions, m_dataFilter?: OmvFeatureFilter | undefined);
    /**
     * Decodes the given tile data.
     *
     * @param data - The tile data to decode.
     * @returns A [[DecodedTile]]
     */
    getDecodedTile(data: ArrayBufferLike | {}): DecodedTile;
    /** @override */
    processPointFeature(layer: string, extents: number, geometry: THREE.Vector3[], properties: ValueMap, featureId: string | number | undefined): void;
    /** @override */
    processLineFeature(layer: string, extents: number, geometry: ILineGeometry[], properties: ValueMap, featureId: string | number | undefined): void;
    /** @override */
    processPolygonFeature(layer: string, extents: number, geometry: IPolygonGeometry[], properties: ValueMap, featureId: string | number | undefined): void;
    private processFeature;
    private createMapEnv;
    private applyKindFilter;
}
/**
 * The vector tile decoder.
 */
export declare class VectorTileDecoder extends ThemedTileDecoder {
    private m_featureFilter?;
    private readonly m_roundUpCoordinatesIfNeeded;
    private m_dataAdapter?;
    private m_options;
    private readonly m_defaultDataAdapters;
    constructor();
    /** @override */
    connect(): Promise<void>;
    /** @override */
    decodeThemedTile(data: ArrayBufferLike | {}, tileKey: TileKey, styleSetEvaluator: StyleSetEvaluator, projection: Projection): Promise<DecodedTile>;
    /** @override */
    configure(options?: DecoderOptions, customOptions?: OptionsMap): void;
    /**
     * Returns the appropiate data adapter to convert the given data into the format expected by
     * VectorTileDecoder.
     * @note Default adapters are available for GeoJson and OMV formats.
     * Child classes may override this function to support additional formats.
     *
     * @param data - The input data to be coverted.
     * @returns The DataAdapter to convert the data, or undefined if there's no adapter for that
     * data format.
     */
    protected getDataAdapter(data: ArrayBufferLike | {}): DataAdapter | undefined;
}
/**
 * Vector Tile Decoder Service.
 */
export declare class VectorTileDecoderService {
    /**
     * Register a vector tile decoder service.
     *
     * @remarks
     * Has to be called during initialization of decoder bundle.
     */
    static start(): void;
}
//# sourceMappingURL=VectorTileDecoder.d.ts.map